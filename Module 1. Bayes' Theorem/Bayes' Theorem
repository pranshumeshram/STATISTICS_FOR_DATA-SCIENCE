# -*- coding: utf-8 -*-
"""Bayes Theorem .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zFQQcO76gNviBTUkpSg6KeCzcIBL5EO5

# Bayes' Theorem


Bayes' Theorem is a way to update our beliefs about the likelihood of something happening based on new evidence. In statistics and data science, it helps us refine our predictions or understanding of events by considering both prior knowledge and new data.

Imagine you have a belief about the probability of a specific event (let’s call this the "prior"). When new evidence (data) comes in, Bayes' Theorem lets us adjust our belief to get a "posterior" probability—this is an updated belief based on both the prior and the new evidence.

# Here’s an example:
Suppose you’re trying to predict if a new person will like a particular movie. You might already know that 60% of people in general like the movie (your prior probability). Then, you learn that this person has a preference for action films, which increases the chances they'll like this movie. Bayes' Theorem combines these two pieces of information—the original 60% likelihood and the fact that the person likes action movies—to give a more precise probability they’ll enjoy it.

# Why Bayes’ Theorem is Useful in Data Science:

**1.Improves Predictions:** It combines past knowledge with new data to refine predictions.

**2.Useful in Classification:** It’s especially helpful in classification problems, where it’s applied in algorithms like Naive Bayes, which classifies data based on likelihoods.

**3.Makes Better Decisions:** By updating beliefs with data, it leads to more data-driven decision-making.
In simple terms, Bayes’ Theorem helps you adjust your expectations or predictions as you learn more, making it a powerful tool for dealing with uncertainty in data.
"""

#Bayes Theorem
def get_outcomes(sample_space, f_name='', e_name=''):
    outcomes = 0
    for e_k, e_v in sample_space.items():
        if f_name=='' or f_name==e_k:
            for se_k, se_v in e_v.items():
                if e_name!='' and se_k == e_name:
                    outcomes+=se_v
                elif e_name=='':
                    outcomes+=se_v
    return outcomes

def p(sample_space, f_name):
    return get_outcomes(sample_space, f_name) / get_outcomes(sample_space, '', '')

def p_inters(sample_space, f_name, e_name):
    return get_outcomes(sample_space, f_name, e_name) / get_outcomes(sample_space, '', '')

def p_conditional(sample_space, f_name, e_name):
    return p_inters(sample_space, f_name, e_name) / p(sample_space, f_name)

def bayes(sample_space, f, given_e):
    sum = 0;
    for e_k, e_v in sample_space.items():
        sum+=p(sample_space, e_k) * p_conditional(sample_space, e_k, given_e)
    return p(sample_space, f) * p_conditional(sample_space, f, given_e) / sum

sample_space = {'UK':{'Boy':10, 'Girl':20},
                'FR':{'Boy':10, 'Girl':10},
                'CA':{'Boy':10, 'Girl':30}}

print('Probability of being from FR:', p(sample_space, 'FR'))
print('Probability to be French Boy:', p_inters(sample_space, 'FR', 'Boy'))
print('Probability of being a Boy given a person is from FR:', p_conditional(sample_space, 'FR', 'Boy'))
print('Probability to be from France given person is Boy:', bayes(sample_space, 'FR', 'Boy'))


sample_space = {'Grow' :{'Up':160, 'Down':40},
                'Slows':{'Up':30, 'Down':70}}

print('Probability economy is growing when stock is Up:', bayes(sample_space, 'Grow', 'Up'))
